digraph {
  node [shape="box", style="rounded"]
  edge [fontcolor="red"];

  start [shape="point", width=0.1]
  unfold [label=<unfold(<font color="blue">into_apas</font>)>]
  transform [label=<transform(<font color="blue">clamp</font>)>]
  fold [label=<fold(<font color="blue">sum_waveforms</font>)>]
  filter [label=<filter(<font color="blue">high_energy</font>)>];
  observer [label=<observe(<font color="blue">histogram_waveforms</font>)>];
  out [label="ROOT output file(s)", shape="cylinder", style="filled", fillcolor="lightgray"]

  {
    rank=same;
    resource [label=<Histogram<br/> resource>,
              shape=hexagon,
              style=filled,
              fillcolor=thistle,
              margin=0];
    root [label="ROOT analysis file", style=filled, shape=cylinder];
  }

  start -> driver [label=" Configuration", fontcolor="forestgreen"];

  {
    rank=same;
    gdml [label="GDML file", shape="cylinder", style="filled", fillcolor="lightgray"]
    driver [label="driver(Spill)", style="rounded,filled",fillcolor="palegreen1"];
    input [label="ROOT input files(s)", shape="cylinder", style="filled", fillcolor="lightgray"];
  }

  driver -> input [style="dotted", arrowhead=none];

  // Providers
  {
    rank=same;
    geometry_provider [label="provide(Geometry)", style="filled,rounded", fillcolor="lightblue"];
    sim_hits_provider [label="provide(SimHits)", style="filled,rounded" fillcolor="lightblue"];
  }

  driver -> geometry_provider [label=" [J]", fontcolor="darkorange"];
  driver -> sim_hits_provider [label=< [Spill<sub><i>j</i></sub>]>, fontcolor="darkorange"];

  geometry_provider -> gdml [style="dotted", arrowhead=none];
  resource -> root [style="dotted", arrowhead=none];

  sim_hits_provider -> input [style="dotted", arrowhead=none];
  sim_hits_provider -> unfold [label=< [SimHits<sub><i>j</i></sub>]>];
  geometry_provider -> unfold [label=< [Geometry]>];

  unfold:s -> transform [xlabel=< [Waveforms<sub><i>j k</i></sub>]>];
  transform:s -> fold [taillabel=<[ClampedWaveforms<sub><i>j k</i></sub>] >,
                       labelangle=-80,
                       labeldistance=7
                      ];

  // Writers
  {
    rank=same;
    waveforms_writer [label="write(Waveforms)", style="filled,rounded", fillcolor="lightblue"];
    summed_waveforms_writer [label="write(SummedWaveforms)", style="filled,rounded", fillcolor="lightblue"];
    clamped_waveforms_writer [label="write(ClampedWaveforms)", style="filled,rounded" fillcolor="lightblue"];
  }

  unfold:s -> waveforms_writer [label=<[Waveforms<sub><i>j k</i></sub>]>];
  transform:s -> clamped_waveforms_writer;
  fold:s -> summed_waveforms_writer [label=< [SummedWaveforms<sub><i>j</i></sub>]>];

  {waveforms_writer, clamped_waveforms_writer, summed_waveforms_writer} -> out [style="dotted", arrowhead=none]

  unfold:s -> filter [label=< [Waveforms<sub><i>j k</i></sub>]>];
  filter:s -> observer [label=< [Waveforms<sub><i>j k</i> '</sub>]>];
  resource -> observer [style="dashed"];

}
